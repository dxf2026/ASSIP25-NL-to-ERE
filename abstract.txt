Runtime-verification (RV) tools built off of the Monitoring Oriented Programming framework (MOP), specifically TraceMOP and JavaMOP, verify that execution traces satisfy formalised runtime properties. These runtime properties typically have five components: natural language (NL) specification, parameters, events, logic, and handlers. The properties require logic to be written in a supported formal language, for example linear temporal logic, finite state machines, and extended regular expression (ERE). ERE is a popular choice, as it is built off of the widely used regular expression (RE). However, the additional constructs in ERE results in a high barrier of entry, even for developers knowledgeable in RE. We propose an algorithm to produce EREs in a setting where NL specifications, parameters, events, and handlers are defined. The algorithm majorly decreases the creative aspect in generating EREs, replacing it with a systematic backtracking-inspired approach. Our algorithm first splits the generation of ERE into multiple subtasks that build off of each other. For each subtask, we reduce it to a iterative procedure, and on each iteration a verification is done with the natural language. Following this algorithm, we received an accuracy of 0% from a sample from the TraceMOP dataset. This algorithm contributes an improvable approach to creating EREs that minimizes human error, and is the first step in developing a system that autonomously generates the parameters, events, logic, and handles solely from the NL specification.
