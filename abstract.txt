Runtime-verification (RV) tools built off of the Monitoring Oriented Programming framework (MOP), specifically TraceMOP and JavaMOP, verify that execution traces satisfy formalised runtime properties. These runtime properties are written in MOP files and typically have five components: a natural language (NL) specification that describes the property, parameters, events, handlers, and a logic property. MOP files require logic properties to be written in a supported formal language, for example linear temporal logic, finite state machines, and extended regular expression (ERE). ERE is a popular choice, as it is built off of the widely used regular expression (RE). However, the additional constructs in ERE results in a high barrier of entry, even for developers knowledgeable in RE. We propose an algorithm to produce EREs in a setting that has the NL specification, parameters, events, and handlers defined. The algorithm majorly decreases the creative aspect in generating EREs, replacing it with a systematic backtracking-inspired approach. Our algorithm first splits the generation of ERE into multiple subtasks. For some subtask, we reduce it to an iterative procedure, where on each iteration, every possible continuation of the ERE is checked for validity. For the remaining subtasks, specifically those that have infeasible search spaces, we leave it as a creative task. Following this algorithm, we received an accuracy of xx.xx% on a sample from the TraceMOP dataset. This algorithm contributes an improvable approach to creating EREs that minimizes human error, turning a creative procedure into an iterative verification task, and is the first step in developing a system that autonomously generates the parameters, events, logic, and handles solely from the NL specification.
